# -*- coding: utf-8 -*-
"""CarPricePrediction_ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1abRITSRayZ_LvOtp67pgYo2lH8SRJn1m
"""

!pip install category_encoders

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
from google.colab import files
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import OneHotEncoder, StandardScaler, MinMaxScaler
from sklearn.model_selection import GridSearchCV, train_test_split, KFold, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error, accuracy_score, mean_absolute_error, mean_squared_error
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.cross_decomposition import PLSRegression
from sklearn.tree import DecisionTreeRegressor
import missingno as msno
from sklearn.utils import shuffle
from category_encoders import TargetEncoder, OneHotEncoder
import warnings
warnings.filterwarnings("ignore")
sns.set(rc = {'figure.figsize': (20, 20)})
# %matplotlib inline

"""Dataset link: https://www.kaggle.com/datasets/CooperUnion/cardataset"""

uploaded = files.upload()

"""###EDA Exploratory Data Analysis

"""

data = pd.read_csv("car_data.csv")
data.head()

data.tail()

data.info()

data.describe()

data.shape

data.columns

data.dtypes

missing_values = data.isnull().any(axis=1)
print(missing_values)

duplicate_rows = data[data.duplicated()]
print(duplicate_rows)

plt.figure(figsize = (20, 15))
sns.countplot(y = data.Make)
plt.title("Car companies with their cars", fontsize = 20)
plt.show()

plt.figure(figsize = (10, 10))
sns.countplot(x = 'Vehicle Size', data = data, palette = 'Set1')

msno.matrix(data, color = (0.5, 0.5, 0.5))

plt.figure(figsize = (20, 10))
data.groupby('Year')['MSRP'].mean().plot(kind = 'bar', color = 'g')
plt.title("The Average Price of cars in different years", fontsize = 20)
plt.show()

plt.figure(figsize = (10, 10))
data.groupby('Transmission Type')['MSRP'].mean().plot(kind = 'bar', color = 'y')
plt.title("The Average Price of cars in different tranmission types", fontsize = 20)
plt.show()

plt.figure(figsize = (15, 15))
numeric_columns = ['Engine HP', 'Engine Cylinders', 'Number of Doors', 'highway MPG', 'city mpg', 'Popularity']
heatmap_data = data[numeric_columns].corr()
sns.heatmap(heatmap_data, cmap = 'BuPu', annot = True)

print(data.head())

"""###Data Cleaning"""

data.columns = data.columns.str.lower().str.replace(" ", "_")
data.rename(columns = {'engine_fuel_type' : 'fuel_type', 'engine_hp' : 'hp', 'engine_cylinders' : 'cylinders', 'transmission_type' : 'transmission', 'driven_wheels' : 'drive', 'number_of_doors' : 'doors', 'market_category' : 'market', 'vehicle_size' : 'size', 'vehicle_style' : 'style', 'msrp' : 'price'}, inplace = True)

print('Number of duplicates are : ', data.duplicated().sum())
data = data.drop_duplicates()

print('Number of missing values in each columns are below : ')
print(data.isnull().sum())

data.drop('market', axis = 1, inplace = True)

null_values = data[data.isnull().any(axis = 1)]
null_values

data['fuel_type'] = data['fuel_type'].fillna('regular unleaded')
data['hp'] = data['hp'].fillna(0)
data['cylinders'] = data['cylinders'].fillna(0)
data['doors'] = data['doors'].fillna(data['doors'].mean())

num_col = data.select_dtypes(include = [np.number])
cat_col = data.select_dtypes(exclude = [np.number])

for col in cat_col:
    print(col)
    print(data[col].unique())
    print(data[col].nunique())
    print('\n', "======================================", '\n')

data.head()

data.drop(data[data['transmission']=='UNKNOWN'].index, axis='index', inplace = True)

import plotly.express as px
import plotly.graph_objects as go

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import make_pipeline

import math
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

for i in num_col:
    fig = px.box(data, x = data[i])
    fig.update_traces(fillcolor = '#C9A26B')
    fig.show()

s1 = data.shape
clean = data[['hp', 'cylinders', 'highway_mpg', 'city_mpg', 'price']]
for i in clean.columns:
    qt1 = data[i].quantile(0.25)
    qt3 = data[i].quantile(0.75)
    iqr =  qt3 - qt1
    lower = qt1-(1.5*iqr)
    upper = qt3+(1.5*iqr)
    min_in = data[data[i]<lower].index
    max_in = data[data[i]>upper].index
    data.drop(min_in, inplace = True)
    data.drop(max_in, inplace = True)
s2 = data.shape
outliers = s1[0] - s2[0]
print("Deleted outliers are : ", outliers)

fig = px.box(data, x = data['hp'])
fig.update_traces(fillcolor = '#C9A26B')

data.describe()

for i in data:
    fig = px.histogram(data, x= i, color_discrete_sequence = ['#C9A26B'])
    fig.show()

fig = px.scatter(data, x = 'year', y = 'price', color = 'cylinders')
fig.show()

fig = px.scatter(data, x = 'hp', y = 'price', color = 'cylinders')
fig.show()

fig = px.scatter(data, x = 'cylinders', y = 'price', color = 'cylinders')
fig.show()

fig = px.scatter(data, x = 'doors', y = 'price', color = 'cylinders')
fig.show()

fig = px.scatter(data, x = 'city_mpg', y = 'price', color = 'cylinders')
fig.show()

"""###Preprocessing"""

cat_features = ['make', 'model', 'fuel_type', 'transmission', 'drive', 'size', 'style']
cars_data = pd.get_dummies(data, columns = cat_features)

X = cars_data.drop('price', axis = 1)
y = cars_data['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""###Modeling"""

rfr = RandomForestRegressor(n_estimators = 40)
rfr_algo = make_pipeline(rfr)

rfr_algo.fit(X_train, y_train)
rfr_pred = rfr_algo.predict(X_test)

print('R2 Score is : ', r2_score(y_test, rfr_pred))
print('Mean squared error is : ', math.sqrt(mean_squared_error(y_test, rfr_pred)))

plt.figure(figsize=(10,10))
plt.ylabel("Predicted Value")
sns.regplot(x=y_test, y=rfr_pred, fit_reg=True, scatter_kws={"s": 100})

"""###Linear Regression"""

X = cars_data.drop('price', axis = 1)
y = cars_data['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

model = LinearRegression()
model.fit(X_train, y_train)
y_predict = model.predict(X_test)
r2 = r2_score(y_test, y_predict)
print('R2 Score is : ', r2)
print('Mean squared error is : ', math.sqrt(mean_squared_error(y_test, y_predict)))
print('Mean absolute error is : ', mean_absolute_error(y_test, y_predict))

plt.figure(figsize=(10,10))
plt.ylabel("Predicted Value")
sns.regplot(x=y_test, y=y_predict, fit_reg=True, scatter_kws={"s": 100})

"""###Support Vector Machine"""

model = SVR()
model.fit(X_train, y_train)
y_predict = model.predict(X_test)
r2 = r2_score(y_test, y_predict)
print('R2 Score is : ', r2)
y_predict = pd.DataFrame(y_predict, columns = ['Predicted Output'])
results = pd.concat([y_predict, y_test.to_frame().reset_index(drop = True)], axis = 1, ignore_index = False)

plt.figure(figsize=(10,10))
plt.ylabel("Predicted Value")
sns.regplot(x=y_test, y=y_predict, fit_reg=True, scatter_kws={"s": 100})

"""###K-Neighbors Regressor"""

model = KNeighborsRegressor(n_neighbors = 2)
model.fit(X_train, y_train)
y_predict = model.predict(X_test)
r2 = r2_score(y_test, y_predict)
print('R2 Score is : ', r2)
y_predict = pd.DataFrame(y_predict, columns = ['Predicted Output'])
results = pd.concat([y_predict, y_test.to_frame().reset_index(drop = True)], axis = 1, ignore_index = False)
print('Mean squared error is : ', math.sqrt(mean_squared_error(y_test, y_predict)))
print('Mean absolute error is : ', mean_absolute_error(y_test, y_predict))

plt.figure(figsize=(10,10))
plt.ylabel("Predicted Value")
sns.regplot(x=y_test, y=y_predict, fit_reg=True, scatter_kws={"s": 100})

plt.figure(figsize = (10, 10))
sns.regplot(data = results, y = 'Predicted Output', x = 'price', color = 'darkslateblue', marker = 'o')
plt.title("Comparision of predicted values and the actual values", fontsize = 20)
plt.show()

"""###PLS Regression"""

model = PLSRegression(n_components = 20)
model.fit(X_train, y_train)
y_predict = model.predict(X_test)
r2 = r2_score(y_test, y_predict)
print('R2 Score is : ', r2)
y_predict = pd.DataFrame(y_predict, columns = ['Predicted Output'])
results = pd.concat([y_predict, y_test.to_frame().reset_index(drop = True)], axis = 1, ignore_index = False)
print('Mean squared error is : ', math.sqrt(mean_squared_error(y_test, y_predict)))
print('Mean absolute error is : ', mean_absolute_error(y_test, y_predict))

plt.figure(figsize=(10,10))
plt.ylabel("Predicted Value")
sns.regplot(x=y_test, y=y_predict, fit_reg=True, scatter_kws={"s": 100})

plt.figure(figsize = (10, 10))
sns.regplot(data = results, y = 'Predicted Output', x = 'price', color = 'darkslateblue', marker = 'o')
plt.title("Comparision of predicted values and the actual values", fontsize = 20)
plt.show()

"""###Decision Tree Regressor"""

model = DecisionTreeRegressor(splitter = 'random')
model.fit(X_train, y_train)
y_predict = model.predict(X_test)
r2 = r2_score(y_test, y_predict)
print('R2 Score is : ', r2)
y_predict = pd.DataFrame(y_predict, columns = ['Predicted Output'])
results = pd.concat([y_predict, y_test.to_frame().reset_index(drop = True)], axis = 1, ignore_index = False)
print('Mean squared error is : ', math.sqrt(mean_squared_error(y_test, y_predict)))
print('Mean absolute error is : ', mean_absolute_error(y_test, y_predict))

plt.figure(figsize = (10, 10))
sns.regplot(data = results, y = 'Predicted Output', x = 'price', color = 'darkslateblue', marker = 'o')
plt.title("Comparision of predicted values and the actual values", fontsize = 20)
plt.show()

"""###Gradient Boosted Decision Regressor"""

model = GradientBoostingRegressor()
model.fit(X_train, y_train)
y_predict = model.predict(X_test)
r2 = r2_score(y_test, y_predict)
print('R2 Score is : ', r2)
y_predict = pd.DataFrame(y_predict, columns = ['Predicted Output'])
results = pd.concat([y_predict, y_test.to_frame().reset_index(drop = True)], axis = 1, ignore_index = False)
print('Mean squared error is : ', math.sqrt(mean_squared_error(y_test, y_predict)))
print('Mean absolute error is : ', mean_absolute_error(y_test, y_predict))

plt.figure(figsize = (10, 10))
sns.regplot(data = results, y = 'Predicted Output', x = 'price', color = 'darkslateblue', marker = 'o')
plt.title("Comparision of predicted values and the actual values", fontsize = 20)
plt.show()

"""###MLP Regressor"""

model = MLPRegressor(hidden_layer_sizes = 50, alpha = 0.001, solver = 'lbfgs', learning_rate = 'adaptive')
model.fit(X_train, y_train)
y_predict = model.predict(X_test)
r2 = r2_score(y_test, y_predict)
print('R2 Score is : ', r2)
y_predict = pd.DataFrame(y_predict, columns = ['Predicted Output'])
results = pd.concat([y_predict, y_test.to_frame().reset_index(drop = True)], axis = 1, ignore_index = False)
print('Mean squared error is : ', math.sqrt(mean_squared_error(y_test, y_predict)))
print('Mean absolute error is : ', mean_absolute_error(y_test, y_predict))

plt.figure(figsize = (10, 10))
sns.regplot(data = results, y = 'Predicted Output', x = 'price', color = 'darkslateblue', marker = 'o')
plt.title("Comparision of predicted values and the actual values", fontsize = 20)
plt.show()



